-- -------------------------------------------------------------
--
-- Module: filter
-- Generated by MATLAB(R) 9.11 and Filter Design HDL Coder 3.1.10.
-- Generated on: 2025-05-09 18:05:39
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- AddPipelineRegisters: on
-- TestBenchStimulus: step ramp chirp 

-- Filter Specifications:
--
-- Sample Rate            : N/A (normalized frequency)
-- Response               : Bandpass
-- Specification          : Fst1,Fp1,Fp2,Fst2,Ast1,Ap,Ast2
-- Second Stopband Atten. : 10 dB
-- First Stopband Edge    : 0.0375
-- First Passband Edge    : 0.075
-- Second Passband Edge   : 0.85
-- Second Stopband Edge   : 0.8875
-- First Stopband Atten.  : 10 dB
-- Passband Ripple        : 1 dB
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- Folding Factor        : 1
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time IIR Filter (real)
-- -------------------------------
-- Filter Structure    : Direct-Form II, Second-Order Sections
-- Number of Sections  : 6
-- Stable              : Yes
-- Linear Phase        : No
-- Arithmetic          : fixed
-- Numerator           : s12,10 -> [-2 2)
-- Denominator         : s12,10 -> [-2 2)
-- Scale Values        : s12,11 -> [-1 1)
-- Input               : s12,0 -> [-2048 2048)
-- Section Input       : s12,7 -> [-16 16)
-- Section Output      : s12,8 -> [-8 8)
-- Output              : s12,8 -> [-8 8)
-- State               : s12,12 -> [-5.000000e-01 5.000000e-01)
-- Numerator Prod      : s24,22 -> [-2 2)
-- Denominator Prod    : s24,22 -> [-2 2)
-- Numerator Accum     : s40,22 -> [-131072 131072)
-- Denominator Accum   : s40,22 -> [-131072 131072)
-- Round Mode          : convergent
-- Overflow Mode       : saturate
-- Cast Before Sum     : true
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY filter IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(11 DOWNTO 0); -- sfix12
         filter_out                      :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En8
         );

END filter;


----------------------------------------------------------------
--Module Architecture: filter
----------------------------------------------------------------
ARCHITECTURE rtl OF filter IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(11 DOWNTO 0); -- sfix12_En12
  -- Constants
  CONSTANT scaleconst1                    : signed(11 DOWNTO 0) := to_signed(1814, 12); -- sfix12_En11
  CONSTANT coeff_b1_section1              : signed(11 DOWNTO 0) := to_signed(1024, 12); -- sfix12_En10
  CONSTANT coeff_b2_section1              : signed(11 DOWNTO 0) := to_signed(0, 12); -- sfix12_En10
  CONSTANT coeff_b3_section1              : signed(11 DOWNTO 0) := to_signed(-1024, 12); -- sfix12_En10
  CONSTANT coeff_a2_section1              : signed(11 DOWNTO 0) := to_signed(1697, 12); -- sfix12_En10
  CONSTANT coeff_a3_section1              : signed(11 DOWNTO 0) := to_signed(835, 12); -- sfix12_En10
  CONSTANT scaleconst2                    : signed(11 DOWNTO 0) := to_signed(1814, 12); -- sfix12_En11
  CONSTANT coeff_b1_section2              : signed(11 DOWNTO 0) := to_signed(1024, 12); -- sfix12_En10
  CONSTANT coeff_b2_section2              : signed(11 DOWNTO 0) := to_signed(0, 12); -- sfix12_En10
  CONSTANT coeff_b3_section2              : signed(11 DOWNTO 0) := to_signed(-1024, 12); -- sfix12_En10
  CONSTANT coeff_a2_section2              : signed(11 DOWNTO 0) := to_signed(-1905, 12); -- sfix12_En10
  CONSTANT coeff_a3_section2              : signed(11 DOWNTO 0) := to_signed(923, 12); -- sfix12_En10
  CONSTANT scaleconst3                    : signed(11 DOWNTO 0) := to_signed(1637, 12); -- sfix12_En11
  CONSTANT coeff_b1_section3              : signed(11 DOWNTO 0) := to_signed(1024, 12); -- sfix12_En10
  CONSTANT coeff_b2_section3              : signed(11 DOWNTO 0) := to_signed(0, 12); -- sfix12_En10
  CONSTANT coeff_b3_section3              : signed(11 DOWNTO 0) := to_signed(-1024, 12); -- sfix12_En10
  CONSTANT coeff_a2_section3              : signed(11 DOWNTO 0) := to_signed(-1746, 12); -- sfix12_En10
  CONSTANT coeff_a3_section3              : signed(11 DOWNTO 0) := to_signed(762, 12); -- sfix12_En10
  CONSTANT scaleconst4                    : signed(11 DOWNTO 0) := to_signed(1637, 12); -- sfix12_En11
  CONSTANT coeff_b1_section4              : signed(11 DOWNTO 0) := to_signed(1024, 12); -- sfix12_En10
  CONSTANT coeff_b2_section4              : signed(11 DOWNTO 0) := to_signed(0, 12); -- sfix12_En10
  CONSTANT coeff_b3_section4              : signed(11 DOWNTO 0) := to_signed(-1024, 12); -- sfix12_En10
  CONSTANT coeff_a2_section4              : signed(11 DOWNTO 0) := to_signed(1447, 12); -- sfix12_En10
  CONSTANT coeff_a3_section4              : signed(11 DOWNTO 0) := to_signed(567, 12); -- sfix12_En10
  CONSTANT scaleconst5                    : signed(11 DOWNTO 0) := to_signed(1555, 12); -- sfix12_En11
  CONSTANT coeff_b1_section5              : signed(11 DOWNTO 0) := to_signed(1024, 12); -- sfix12_En10
  CONSTANT coeff_b2_section5              : signed(11 DOWNTO 0) := to_signed(0, 12); -- sfix12_En10
  CONSTANT coeff_b3_section5              : signed(11 DOWNTO 0) := to_signed(-1024, 12); -- sfix12_En10
  CONSTANT coeff_a2_section5              : signed(11 DOWNTO 0) := to_signed(-1654, 12); -- sfix12_En10
  CONSTANT coeff_a3_section5              : signed(11 DOWNTO 0) := to_signed(670, 12); -- sfix12_En10
  CONSTANT scaleconst6                    : signed(11 DOWNTO 0) := to_signed(1555, 12); -- sfix12_En11
  CONSTANT coeff_b1_section6              : signed(11 DOWNTO 0) := to_signed(1024, 12); -- sfix12_En10
  CONSTANT coeff_b2_section6              : signed(11 DOWNTO 0) := to_signed(0, 12); -- sfix12_En10
  CONSTANT coeff_b3_section6              : signed(11 DOWNTO 0) := to_signed(-1024, 12); -- sfix12_En10
  CONSTANT coeff_a2_section6              : signed(11 DOWNTO 0) := to_signed(1317, 12); -- sfix12_En10
  CONSTANT coeff_a3_section6              : signed(11 DOWNTO 0) := to_signed(430, 12); -- sfix12_En10
  -- Signals
  SIGNAL input_register                   : signed(11 DOWNTO 0); -- sfix12
  SIGNAL scale1                           : signed(31 DOWNTO 0); -- sfix32_En19
  SIGNAL mul_temp                         : signed(23 DOWNTO 0); -- sfix24_En11
  SIGNAL scaletypeconvert1                : signed(11 DOWNTO 0); -- sfix12_En7
  -- Section 1 Signals 
  SIGNAL a1sum1                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2sum1                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL b1sum1                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL typeconvert1                     : signed(11 DOWNTO 0); -- sfix12_En12
  SIGNAL delay_section1                   : delay_pipeline_type(0 TO 1); -- sfix12_En12
  SIGNAL inputconv1                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2mul1                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL a3mul1                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b1mul1                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b3mul1                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL unaryminus_temp                  : signed(12 DOWNTO 0); -- sfix13_En12
  SIGNAL sub_cast                         : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_1                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp                         : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL sub_cast_2                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_3                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_1                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL b1multypeconvert1                : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast                         : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_1                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_temp                         : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL section_result1                  : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL sos_pipeline1                    : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL scale2                           : signed(31 DOWNTO 0); -- sfix32_En19
  SIGNAL mul_temp_1                       : signed(23 DOWNTO 0); -- sfix24_En19
  SIGNAL scaletypeconvert2                : signed(11 DOWNTO 0); -- sfix12_En7
  -- Section 2 Signals 
  SIGNAL a1sum2                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2sum2                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL b1sum2                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL typeconvert2                     : signed(11 DOWNTO 0); -- sfix12_En12
  SIGNAL delay_section2                   : delay_pipeline_type(0 TO 1); -- sfix12_En12
  SIGNAL inputconv2                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2mul2                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL a3mul2                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b1mul2                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b3mul2                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL unaryminus_temp_1                : signed(12 DOWNTO 0); -- sfix13_En12
  SIGNAL sub_cast_4                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_5                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_2                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL sub_cast_6                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_7                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_3                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL b1multypeconvert2                : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_2                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_3                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_temp_1                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL section_result2                  : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL sos_pipeline2                    : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL scale3                           : signed(31 DOWNTO 0); -- sfix32_En19
  SIGNAL mul_temp_2                       : signed(23 DOWNTO 0); -- sfix24_En19
  SIGNAL scaletypeconvert3                : signed(11 DOWNTO 0); -- sfix12_En7
  -- Section 3 Signals 
  SIGNAL a1sum3                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2sum3                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL b1sum3                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL typeconvert3                     : signed(11 DOWNTO 0); -- sfix12_En12
  SIGNAL delay_section3                   : delay_pipeline_type(0 TO 1); -- sfix12_En12
  SIGNAL inputconv3                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2mul3                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL a3mul3                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b1mul3                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b3mul3                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL unaryminus_temp_2                : signed(12 DOWNTO 0); -- sfix13_En12
  SIGNAL sub_cast_8                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_9                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_4                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL sub_cast_10                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_11                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_5                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL b1multypeconvert3                : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_4                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_5                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_temp_2                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL section_result3                  : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL sos_pipeline3                    : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL scale4                           : signed(31 DOWNTO 0); -- sfix32_En19
  SIGNAL mul_temp_3                       : signed(23 DOWNTO 0); -- sfix24_En19
  SIGNAL scaletypeconvert4                : signed(11 DOWNTO 0); -- sfix12_En7
  -- Section 4 Signals 
  SIGNAL a1sum4                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2sum4                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL b1sum4                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL typeconvert4                     : signed(11 DOWNTO 0); -- sfix12_En12
  SIGNAL delay_section4                   : delay_pipeline_type(0 TO 1); -- sfix12_En12
  SIGNAL inputconv4                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2mul4                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL a3mul4                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b1mul4                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b3mul4                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL unaryminus_temp_3                : signed(12 DOWNTO 0); -- sfix13_En12
  SIGNAL sub_cast_12                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_13                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_6                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL sub_cast_14                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_15                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_7                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL b1multypeconvert4                : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_6                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_7                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_temp_3                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL section_result4                  : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL sos_pipeline4                    : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL scale5                           : signed(31 DOWNTO 0); -- sfix32_En19
  SIGNAL mul_temp_4                       : signed(23 DOWNTO 0); -- sfix24_En19
  SIGNAL scaletypeconvert5                : signed(11 DOWNTO 0); -- sfix12_En7
  -- Section 5 Signals 
  SIGNAL a1sum5                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2sum5                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL b1sum5                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL typeconvert5                     : signed(11 DOWNTO 0); -- sfix12_En12
  SIGNAL delay_section5                   : delay_pipeline_type(0 TO 1); -- sfix12_En12
  SIGNAL inputconv5                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2mul5                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL a3mul5                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b1mul5                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b3mul5                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL unaryminus_temp_4                : signed(12 DOWNTO 0); -- sfix13_En12
  SIGNAL sub_cast_16                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_17                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_8                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL sub_cast_18                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_19                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_9                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL b1multypeconvert5                : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_8                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_9                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_temp_4                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL section_result5                  : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL sos_pipeline5                    : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL scale6                           : signed(31 DOWNTO 0); -- sfix32_En19
  SIGNAL mul_temp_5                       : signed(23 DOWNTO 0); -- sfix24_En19
  SIGNAL scaletypeconvert6                : signed(11 DOWNTO 0); -- sfix12_En7
  -- Section 6 Signals 
  SIGNAL a1sum6                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2sum6                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL b1sum6                           : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL typeconvert6                     : signed(11 DOWNTO 0); -- sfix12_En12
  SIGNAL delay_section6                   : delay_pipeline_type(0 TO 1); -- sfix12_En12
  SIGNAL inputconv6                       : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL a2mul6                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL a3mul6                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b1mul6                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL b3mul6                           : signed(23 DOWNTO 0); -- sfix24_En22
  SIGNAL unaryminus_temp_5                : signed(12 DOWNTO 0); -- sfix13_En12
  SIGNAL sub_cast_20                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_21                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_10                      : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL sub_cast_22                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_cast_23                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL sub_temp_11                      : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL b1multypeconvert6                : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_10                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_cast_11                      : signed(39 DOWNTO 0); -- sfix40_En22
  SIGNAL add_temp_5                       : signed(40 DOWNTO 0); -- sfix41_En22
  SIGNAL output_typeconvert               : signed(11 DOWNTO 0); -- sfix12_En8
  SIGNAL output_register                  : signed(11 DOWNTO 0); -- sfix12_En8


BEGIN

  -- Block Statements
  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  mul_temp <= input_register * scaleconst1;
  scale1 <= resize(mul_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  scaletypeconvert1 <= (11 => '0', OTHERS => '1') WHEN (scale1(31) = '0' AND scale1(30 DOWNTO 23) /= "00000000") OR (scale1(31) = '0' AND scale1(23 DOWNTO 12) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN scale1(31) = '1' AND scale1(30 DOWNTO 23) /= "11111111"
      ELSE (resize(shift_right(scale1(23 DOWNTO 0) + ( "0" & (scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12) & NOT scale1(12))), 12), 12));

  --   ------------------ Section 1 ------------------

  typeconvert1 <= (11 => '0', OTHERS => '1') WHEN (a1sum1(39) = '0' AND a1sum1(38 DOWNTO 21) /= "000000000000000000") OR (a1sum1(39) = '0' AND a1sum1(21 DOWNTO 10) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN a1sum1(39) = '1' AND a1sum1(38 DOWNTO 21) /= "111111111111111111"
      ELSE (resize(shift_right(a1sum1(21 DOWNTO 0) + ( "0" & (a1sum1(10) & NOT a1sum1(10) & NOT a1sum1(10) & NOT a1sum1(10) & NOT a1sum1(10) & NOT a1sum1(10) & NOT a1sum1(10) & NOT a1sum1(10) & NOT a1sum1(10) & NOT a1sum1(10))), 10), 12));

  delay_process_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section1 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section1(1) <= delay_section1(0);
        delay_section1(0) <= typeconvert1;
      END IF;
    END IF;
  END PROCESS delay_process_section1;

  inputconv1 <= resize(scaletypeconvert1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 40);

  a2mul1 <= delay_section1(0) * coeff_a2_section1;

  a3mul1 <= delay_section1(1) * coeff_a3_section1;

  b1mul1 <= resize(typeconvert1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  unaryminus_temp <= ('0' & delay_section1(1)) WHEN delay_section1(1) = "100000000000"
      ELSE -resize(delay_section1(1),13);
  b3mul1 <= resize(unaryminus_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  sub_cast <= inputconv1;
  sub_cast_1 <= resize(a2mul1, 40);
  sub_temp <= resize(sub_cast, 41) - resize(sub_cast_1, 41);
  a2sum1 <= (39 => '0', OTHERS => '1') WHEN (sub_temp(40) = '0' AND sub_temp(39) /= '0') OR (sub_temp(40) = '0' AND sub_temp(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp(40) = '1' AND sub_temp(39) /= '1'
      ELSE (sub_temp(39 DOWNTO 0));

  sub_cast_2 <= a2sum1;
  sub_cast_3 <= resize(a3mul1, 40);
  sub_temp_1 <= resize(sub_cast_2, 41) - resize(sub_cast_3, 41);
  a1sum1 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_1(40) = '0' AND sub_temp_1(39) /= '0') OR (sub_temp_1(40) = '0' AND sub_temp_1(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_1(40) = '1' AND sub_temp_1(39) /= '1'
      ELSE (sub_temp_1(39 DOWNTO 0));

  b1multypeconvert1 <= resize(b1mul1, 40);

  add_cast <= b1multypeconvert1;
  add_cast_1 <= resize(b3mul1, 40);
  add_temp <= resize(add_cast, 41) + resize(add_cast_1, 41);
  b1sum1 <= (39 => '0', OTHERS => '1') WHEN (add_temp(40) = '0' AND add_temp(39) /= '0') OR (add_temp(40) = '0' AND add_temp(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp(40) = '1' AND add_temp(39) /= '1'
      ELSE (add_temp(39 DOWNTO 0));

  section_result1 <= (11 => '0', OTHERS => '1') WHEN (b1sum1(39) = '0' AND b1sum1(38 DOWNTO 25) /= "00000000000000") OR (b1sum1(39) = '0' AND b1sum1(25 DOWNTO 14) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN b1sum1(39) = '1' AND b1sum1(38 DOWNTO 25) /= "11111111111111"
      ELSE (resize(shift_right(b1sum1(25 DOWNTO 0) + ( "0" & (b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14) & NOT b1sum1(14))), 14), 12));

  sos_pipeline_process_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sos_pipeline1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sos_pipeline1 <= section_result1;
      END IF;
    END IF; 
  END PROCESS sos_pipeline_process_section1;

  mul_temp_1 <= sos_pipeline1 * scaleconst2;
  scale2 <= resize(mul_temp_1, 32);

  scaletypeconvert2 <= (11 => '0', OTHERS => '1') WHEN (scale2(31) = '0' AND scale2(30 DOWNTO 23) /= "00000000") OR (scale2(31) = '0' AND scale2(23 DOWNTO 12) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN scale2(31) = '1' AND scale2(30 DOWNTO 23) /= "11111111"
      ELSE (resize(shift_right(scale2(23 DOWNTO 0) + ( "0" & (scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12) & NOT scale2(12))), 12), 12));

  --   ------------------ Section 2 ------------------

  typeconvert2 <= (11 => '0', OTHERS => '1') WHEN (a1sum2(39) = '0' AND a1sum2(38 DOWNTO 21) /= "000000000000000000") OR (a1sum2(39) = '0' AND a1sum2(21 DOWNTO 10) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN a1sum2(39) = '1' AND a1sum2(38 DOWNTO 21) /= "111111111111111111"
      ELSE (resize(shift_right(a1sum2(21 DOWNTO 0) + ( "0" & (a1sum2(10) & NOT a1sum2(10) & NOT a1sum2(10) & NOT a1sum2(10) & NOT a1sum2(10) & NOT a1sum2(10) & NOT a1sum2(10) & NOT a1sum2(10) & NOT a1sum2(10) & NOT a1sum2(10))), 10), 12));

  delay_process_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section2 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section2(1) <= delay_section2(0);
        delay_section2(0) <= typeconvert2;
      END IF;
    END IF;
  END PROCESS delay_process_section2;

  inputconv2 <= resize(scaletypeconvert2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 40);

  a2mul2 <= delay_section2(0) * coeff_a2_section2;

  a3mul2 <= delay_section2(1) * coeff_a3_section2;

  b1mul2 <= resize(typeconvert2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  unaryminus_temp_1 <= ('0' & delay_section2(1)) WHEN delay_section2(1) = "100000000000"
      ELSE -resize(delay_section2(1),13);
  b3mul2 <= resize(unaryminus_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  sub_cast_4 <= inputconv2;
  sub_cast_5 <= resize(a2mul2, 40);
  sub_temp_2 <= resize(sub_cast_4, 41) - resize(sub_cast_5, 41);
  a2sum2 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_2(40) = '0' AND sub_temp_2(39) /= '0') OR (sub_temp_2(40) = '0' AND sub_temp_2(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_2(40) = '1' AND sub_temp_2(39) /= '1'
      ELSE (sub_temp_2(39 DOWNTO 0));

  sub_cast_6 <= a2sum2;
  sub_cast_7 <= resize(a3mul2, 40);
  sub_temp_3 <= resize(sub_cast_6, 41) - resize(sub_cast_7, 41);
  a1sum2 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_3(40) = '0' AND sub_temp_3(39) /= '0') OR (sub_temp_3(40) = '0' AND sub_temp_3(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_3(40) = '1' AND sub_temp_3(39) /= '1'
      ELSE (sub_temp_3(39 DOWNTO 0));

  b1multypeconvert2 <= resize(b1mul2, 40);

  add_cast_2 <= b1multypeconvert2;
  add_cast_3 <= resize(b3mul2, 40);
  add_temp_1 <= resize(add_cast_2, 41) + resize(add_cast_3, 41);
  b1sum2 <= (39 => '0', OTHERS => '1') WHEN (add_temp_1(40) = '0' AND add_temp_1(39) /= '0') OR (add_temp_1(40) = '0' AND add_temp_1(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_1(40) = '1' AND add_temp_1(39) /= '1'
      ELSE (add_temp_1(39 DOWNTO 0));

  section_result2 <= (11 => '0', OTHERS => '1') WHEN (b1sum2(39) = '0' AND b1sum2(38 DOWNTO 25) /= "00000000000000") OR (b1sum2(39) = '0' AND b1sum2(25 DOWNTO 14) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN b1sum2(39) = '1' AND b1sum2(38 DOWNTO 25) /= "11111111111111"
      ELSE (resize(shift_right(b1sum2(25 DOWNTO 0) + ( "0" & (b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14) & NOT b1sum2(14))), 14), 12));

  sos_pipeline_process_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sos_pipeline2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sos_pipeline2 <= section_result2;
      END IF;
    END IF; 
  END PROCESS sos_pipeline_process_section2;

  mul_temp_2 <= sos_pipeline2 * scaleconst3;
  scale3 <= resize(mul_temp_2, 32);

  scaletypeconvert3 <= (11 => '0', OTHERS => '1') WHEN (scale3(31) = '0' AND scale3(30 DOWNTO 23) /= "00000000") OR (scale3(31) = '0' AND scale3(23 DOWNTO 12) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN scale3(31) = '1' AND scale3(30 DOWNTO 23) /= "11111111"
      ELSE (resize(shift_right(scale3(23 DOWNTO 0) + ( "0" & (scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12) & NOT scale3(12))), 12), 12));

  --   ------------------ Section 3 ------------------

  typeconvert3 <= (11 => '0', OTHERS => '1') WHEN (a1sum3(39) = '0' AND a1sum3(38 DOWNTO 21) /= "000000000000000000") OR (a1sum3(39) = '0' AND a1sum3(21 DOWNTO 10) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN a1sum3(39) = '1' AND a1sum3(38 DOWNTO 21) /= "111111111111111111"
      ELSE (resize(shift_right(a1sum3(21 DOWNTO 0) + ( "0" & (a1sum3(10) & NOT a1sum3(10) & NOT a1sum3(10) & NOT a1sum3(10) & NOT a1sum3(10) & NOT a1sum3(10) & NOT a1sum3(10) & NOT a1sum3(10) & NOT a1sum3(10) & NOT a1sum3(10))), 10), 12));

  delay_process_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section3 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section3(1) <= delay_section3(0);
        delay_section3(0) <= typeconvert3;
      END IF;
    END IF;
  END PROCESS delay_process_section3;

  inputconv3 <= resize(scaletypeconvert3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 40);

  a2mul3 <= delay_section3(0) * coeff_a2_section3;

  a3mul3 <= delay_section3(1) * coeff_a3_section3;

  b1mul3 <= resize(typeconvert3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  unaryminus_temp_2 <= ('0' & delay_section3(1)) WHEN delay_section3(1) = "100000000000"
      ELSE -resize(delay_section3(1),13);
  b3mul3 <= resize(unaryminus_temp_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  sub_cast_8 <= inputconv3;
  sub_cast_9 <= resize(a2mul3, 40);
  sub_temp_4 <= resize(sub_cast_8, 41) - resize(sub_cast_9, 41);
  a2sum3 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_4(40) = '0' AND sub_temp_4(39) /= '0') OR (sub_temp_4(40) = '0' AND sub_temp_4(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_4(40) = '1' AND sub_temp_4(39) /= '1'
      ELSE (sub_temp_4(39 DOWNTO 0));

  sub_cast_10 <= a2sum3;
  sub_cast_11 <= resize(a3mul3, 40);
  sub_temp_5 <= resize(sub_cast_10, 41) - resize(sub_cast_11, 41);
  a1sum3 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_5(40) = '0' AND sub_temp_5(39) /= '0') OR (sub_temp_5(40) = '0' AND sub_temp_5(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_5(40) = '1' AND sub_temp_5(39) /= '1'
      ELSE (sub_temp_5(39 DOWNTO 0));

  b1multypeconvert3 <= resize(b1mul3, 40);

  add_cast_4 <= b1multypeconvert3;
  add_cast_5 <= resize(b3mul3, 40);
  add_temp_2 <= resize(add_cast_4, 41) + resize(add_cast_5, 41);
  b1sum3 <= (39 => '0', OTHERS => '1') WHEN (add_temp_2(40) = '0' AND add_temp_2(39) /= '0') OR (add_temp_2(40) = '0' AND add_temp_2(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_2(40) = '1' AND add_temp_2(39) /= '1'
      ELSE (add_temp_2(39 DOWNTO 0));

  section_result3 <= (11 => '0', OTHERS => '1') WHEN (b1sum3(39) = '0' AND b1sum3(38 DOWNTO 25) /= "00000000000000") OR (b1sum3(39) = '0' AND b1sum3(25 DOWNTO 14) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN b1sum3(39) = '1' AND b1sum3(38 DOWNTO 25) /= "11111111111111"
      ELSE (resize(shift_right(b1sum3(25 DOWNTO 0) + ( "0" & (b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14) & NOT b1sum3(14))), 14), 12));

  sos_pipeline_process_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sos_pipeline3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sos_pipeline3 <= section_result3;
      END IF;
    END IF; 
  END PROCESS sos_pipeline_process_section3;

  mul_temp_3 <= sos_pipeline3 * scaleconst4;
  scale4 <= resize(mul_temp_3, 32);

  scaletypeconvert4 <= (11 => '0', OTHERS => '1') WHEN (scale4(31) = '0' AND scale4(30 DOWNTO 23) /= "00000000") OR (scale4(31) = '0' AND scale4(23 DOWNTO 12) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN scale4(31) = '1' AND scale4(30 DOWNTO 23) /= "11111111"
      ELSE (resize(shift_right(scale4(23 DOWNTO 0) + ( "0" & (scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12) & NOT scale4(12))), 12), 12));

  --   ------------------ Section 4 ------------------

  typeconvert4 <= (11 => '0', OTHERS => '1') WHEN (a1sum4(39) = '0' AND a1sum4(38 DOWNTO 21) /= "000000000000000000") OR (a1sum4(39) = '0' AND a1sum4(21 DOWNTO 10) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN a1sum4(39) = '1' AND a1sum4(38 DOWNTO 21) /= "111111111111111111"
      ELSE (resize(shift_right(a1sum4(21 DOWNTO 0) + ( "0" & (a1sum4(10) & NOT a1sum4(10) & NOT a1sum4(10) & NOT a1sum4(10) & NOT a1sum4(10) & NOT a1sum4(10) & NOT a1sum4(10) & NOT a1sum4(10) & NOT a1sum4(10) & NOT a1sum4(10))), 10), 12));

  delay_process_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section4 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section4(1) <= delay_section4(0);
        delay_section4(0) <= typeconvert4;
      END IF;
    END IF;
  END PROCESS delay_process_section4;

  inputconv4 <= resize(scaletypeconvert4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 40);

  a2mul4 <= delay_section4(0) * coeff_a2_section4;

  a3mul4 <= delay_section4(1) * coeff_a3_section4;

  b1mul4 <= resize(typeconvert4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  unaryminus_temp_3 <= ('0' & delay_section4(1)) WHEN delay_section4(1) = "100000000000"
      ELSE -resize(delay_section4(1),13);
  b3mul4 <= resize(unaryminus_temp_3 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  sub_cast_12 <= inputconv4;
  sub_cast_13 <= resize(a2mul4, 40);
  sub_temp_6 <= resize(sub_cast_12, 41) - resize(sub_cast_13, 41);
  a2sum4 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_6(40) = '0' AND sub_temp_6(39) /= '0') OR (sub_temp_6(40) = '0' AND sub_temp_6(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_6(40) = '1' AND sub_temp_6(39) /= '1'
      ELSE (sub_temp_6(39 DOWNTO 0));

  sub_cast_14 <= a2sum4;
  sub_cast_15 <= resize(a3mul4, 40);
  sub_temp_7 <= resize(sub_cast_14, 41) - resize(sub_cast_15, 41);
  a1sum4 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_7(40) = '0' AND sub_temp_7(39) /= '0') OR (sub_temp_7(40) = '0' AND sub_temp_7(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_7(40) = '1' AND sub_temp_7(39) /= '1'
      ELSE (sub_temp_7(39 DOWNTO 0));

  b1multypeconvert4 <= resize(b1mul4, 40);

  add_cast_6 <= b1multypeconvert4;
  add_cast_7 <= resize(b3mul4, 40);
  add_temp_3 <= resize(add_cast_6, 41) + resize(add_cast_7, 41);
  b1sum4 <= (39 => '0', OTHERS => '1') WHEN (add_temp_3(40) = '0' AND add_temp_3(39) /= '0') OR (add_temp_3(40) = '0' AND add_temp_3(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_3(40) = '1' AND add_temp_3(39) /= '1'
      ELSE (add_temp_3(39 DOWNTO 0));

  section_result4 <= (11 => '0', OTHERS => '1') WHEN (b1sum4(39) = '0' AND b1sum4(38 DOWNTO 25) /= "00000000000000") OR (b1sum4(39) = '0' AND b1sum4(25 DOWNTO 14) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN b1sum4(39) = '1' AND b1sum4(38 DOWNTO 25) /= "11111111111111"
      ELSE (resize(shift_right(b1sum4(25 DOWNTO 0) + ( "0" & (b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14) & NOT b1sum4(14))), 14), 12));

  sos_pipeline_process_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sos_pipeline4 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sos_pipeline4 <= section_result4;
      END IF;
    END IF; 
  END PROCESS sos_pipeline_process_section4;

  mul_temp_4 <= sos_pipeline4 * scaleconst5;
  scale5 <= resize(mul_temp_4, 32);

  scaletypeconvert5 <= (11 => '0', OTHERS => '1') WHEN (scale5(31) = '0' AND scale5(30 DOWNTO 23) /= "00000000") OR (scale5(31) = '0' AND scale5(23 DOWNTO 12) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN scale5(31) = '1' AND scale5(30 DOWNTO 23) /= "11111111"
      ELSE (resize(shift_right(scale5(23 DOWNTO 0) + ( "0" & (scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12) & NOT scale5(12))), 12), 12));

  --   ------------------ Section 5 ------------------

  typeconvert5 <= (11 => '0', OTHERS => '1') WHEN (a1sum5(39) = '0' AND a1sum5(38 DOWNTO 21) /= "000000000000000000") OR (a1sum5(39) = '0' AND a1sum5(21 DOWNTO 10) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN a1sum5(39) = '1' AND a1sum5(38 DOWNTO 21) /= "111111111111111111"
      ELSE (resize(shift_right(a1sum5(21 DOWNTO 0) + ( "0" & (a1sum5(10) & NOT a1sum5(10) & NOT a1sum5(10) & NOT a1sum5(10) & NOT a1sum5(10) & NOT a1sum5(10) & NOT a1sum5(10) & NOT a1sum5(10) & NOT a1sum5(10) & NOT a1sum5(10))), 10), 12));

  delay_process_section5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section5 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section5(1) <= delay_section5(0);
        delay_section5(0) <= typeconvert5;
      END IF;
    END IF;
  END PROCESS delay_process_section5;

  inputconv5 <= resize(scaletypeconvert5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 40);

  a2mul5 <= delay_section5(0) * coeff_a2_section5;

  a3mul5 <= delay_section5(1) * coeff_a3_section5;

  b1mul5 <= resize(typeconvert5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  unaryminus_temp_4 <= ('0' & delay_section5(1)) WHEN delay_section5(1) = "100000000000"
      ELSE -resize(delay_section5(1),13);
  b3mul5 <= resize(unaryminus_temp_4 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  sub_cast_16 <= inputconv5;
  sub_cast_17 <= resize(a2mul5, 40);
  sub_temp_8 <= resize(sub_cast_16, 41) - resize(sub_cast_17, 41);
  a2sum5 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_8(40) = '0' AND sub_temp_8(39) /= '0') OR (sub_temp_8(40) = '0' AND sub_temp_8(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_8(40) = '1' AND sub_temp_8(39) /= '1'
      ELSE (sub_temp_8(39 DOWNTO 0));

  sub_cast_18 <= a2sum5;
  sub_cast_19 <= resize(a3mul5, 40);
  sub_temp_9 <= resize(sub_cast_18, 41) - resize(sub_cast_19, 41);
  a1sum5 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_9(40) = '0' AND sub_temp_9(39) /= '0') OR (sub_temp_9(40) = '0' AND sub_temp_9(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_9(40) = '1' AND sub_temp_9(39) /= '1'
      ELSE (sub_temp_9(39 DOWNTO 0));

  b1multypeconvert5 <= resize(b1mul5, 40);

  add_cast_8 <= b1multypeconvert5;
  add_cast_9 <= resize(b3mul5, 40);
  add_temp_4 <= resize(add_cast_8, 41) + resize(add_cast_9, 41);
  b1sum5 <= (39 => '0', OTHERS => '1') WHEN (add_temp_4(40) = '0' AND add_temp_4(39) /= '0') OR (add_temp_4(40) = '0' AND add_temp_4(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_4(40) = '1' AND add_temp_4(39) /= '1'
      ELSE (add_temp_4(39 DOWNTO 0));

  section_result5 <= (11 => '0', OTHERS => '1') WHEN (b1sum5(39) = '0' AND b1sum5(38 DOWNTO 25) /= "00000000000000") OR (b1sum5(39) = '0' AND b1sum5(25 DOWNTO 14) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN b1sum5(39) = '1' AND b1sum5(38 DOWNTO 25) /= "11111111111111"
      ELSE (resize(shift_right(b1sum5(25 DOWNTO 0) + ( "0" & (b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14) & NOT b1sum5(14))), 14), 12));

  sos_pipeline_process_section5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sos_pipeline5 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        sos_pipeline5 <= section_result5;
      END IF;
    END IF; 
  END PROCESS sos_pipeline_process_section5;

  mul_temp_5 <= sos_pipeline5 * scaleconst6;
  scale6 <= resize(mul_temp_5, 32);

  scaletypeconvert6 <= (11 => '0', OTHERS => '1') WHEN (scale6(31) = '0' AND scale6(30 DOWNTO 23) /= "00000000") OR (scale6(31) = '0' AND scale6(23 DOWNTO 12) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN scale6(31) = '1' AND scale6(30 DOWNTO 23) /= "11111111"
      ELSE (resize(shift_right(scale6(23 DOWNTO 0) + ( "0" & (scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12) & NOT scale6(12))), 12), 12));

  --   ------------------ Section 6 ------------------

  typeconvert6 <= (11 => '0', OTHERS => '1') WHEN (a1sum6(39) = '0' AND a1sum6(38 DOWNTO 21) /= "000000000000000000") OR (a1sum6(39) = '0' AND a1sum6(21 DOWNTO 10) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN a1sum6(39) = '1' AND a1sum6(38 DOWNTO 21) /= "111111111111111111"
      ELSE (resize(shift_right(a1sum6(21 DOWNTO 0) + ( "0" & (a1sum6(10) & NOT a1sum6(10) & NOT a1sum6(10) & NOT a1sum6(10) & NOT a1sum6(10) & NOT a1sum6(10) & NOT a1sum6(10) & NOT a1sum6(10) & NOT a1sum6(10) & NOT a1sum6(10))), 10), 12));

  delay_process_section6 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_section6 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        delay_section6(1) <= delay_section6(0);
        delay_section6(0) <= typeconvert6;
      END IF;
    END IF;
  END PROCESS delay_process_section6;

  inputconv6 <= resize(scaletypeconvert6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 40);

  a2mul6 <= delay_section6(0) * coeff_a2_section6;

  a3mul6 <= delay_section6(1) * coeff_a3_section6;

  b1mul6 <= resize(typeconvert6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  unaryminus_temp_5 <= ('0' & delay_section6(1)) WHEN delay_section6(1) = "100000000000"
      ELSE -resize(delay_section6(1),13);
  b3mul6 <= resize(unaryminus_temp_5 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24);

  sub_cast_20 <= inputconv6;
  sub_cast_21 <= resize(a2mul6, 40);
  sub_temp_10 <= resize(sub_cast_20, 41) - resize(sub_cast_21, 41);
  a2sum6 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_10(40) = '0' AND sub_temp_10(39) /= '0') OR (sub_temp_10(40) = '0' AND sub_temp_10(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_10(40) = '1' AND sub_temp_10(39) /= '1'
      ELSE (sub_temp_10(39 DOWNTO 0));

  sub_cast_22 <= a2sum6;
  sub_cast_23 <= resize(a3mul6, 40);
  sub_temp_11 <= resize(sub_cast_22, 41) - resize(sub_cast_23, 41);
  a1sum6 <= (39 => '0', OTHERS => '1') WHEN (sub_temp_11(40) = '0' AND sub_temp_11(39) /= '0') OR (sub_temp_11(40) = '0' AND sub_temp_11(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN sub_temp_11(40) = '1' AND sub_temp_11(39) /= '1'
      ELSE (sub_temp_11(39 DOWNTO 0));

  b1multypeconvert6 <= resize(b1mul6, 40);

  add_cast_10 <= b1multypeconvert6;
  add_cast_11 <= resize(b3mul6, 40);
  add_temp_5 <= resize(add_cast_10, 41) + resize(add_cast_11, 41);
  b1sum6 <= (39 => '0', OTHERS => '1') WHEN (add_temp_5(40) = '0' AND add_temp_5(39) /= '0') OR (add_temp_5(40) = '0' AND add_temp_5(39 DOWNTO 0) = "0111111111111111111111111111111111111111") -- special case0
      ELSE (39 => '1', OTHERS => '0') WHEN add_temp_5(40) = '1' AND add_temp_5(39) /= '1'
      ELSE (add_temp_5(39 DOWNTO 0));

  output_typeconvert <= (11 => '0', OTHERS => '1') WHEN (b1sum6(39) = '0' AND b1sum6(38 DOWNTO 25) /= "00000000000000") OR (b1sum6(39) = '0' AND b1sum6(25 DOWNTO 14) = "011111111111") -- special case0
      ELSE (11 => '1', OTHERS => '0') WHEN b1sum6(39) = '1' AND b1sum6(38 DOWNTO 25) /= "11111111111111"
      ELSE (resize(shift_right(b1sum6(25 DOWNTO 0) + ( "0" & (b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14) & NOT b1sum6(14))), 14), 12));

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
